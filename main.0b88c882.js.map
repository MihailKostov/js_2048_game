{"version":3,"sources":["scripts/main.js"],"names":["fieldRows","document","querySelector","rows","scoreBoard","startGame","startMessage","winMessage","loseMessage","columns","score","gameField","resetField","updateGame","row","col","updateCell","cells","innerText","String","cell","num","className","classList","add","isEmpty","isPossible","check","setNewCell","value","Math","random","floor","filterRow","filter","el","slide","newRow","i","length","isFinite","isWin","push","slideLeft","slideRight","reverse","slideUp","column","slideDown","remove","replace","addEventListener","type","contains","code"],"mappings":";AAAA,aAEA,IAAMA,EAAYC,SAASC,cAAc,SAASC,KAC5CC,EAAaH,SAASC,cAAc,eACpCG,EAAYJ,SAASC,cAAc,UAEnCI,EAAeL,SAASC,cAAc,kBACtCK,EAAaN,SAASC,cAAc,gBACpCM,EAAcP,SAASC,cAAc,iBAErCC,EAAO,EACPM,EAAU,EACZC,EAAQ,EAERC,EAAYC,IAEhB,SAASA,IACA,MAAA,CACL,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAqDd,SAASC,IACF,IAAA,IAAIC,EAAM,EAAGA,EAAMX,EAAMW,IACvB,IAAA,IAAIC,EAAM,EAAGA,EAAMN,EAASM,IAAO,CAItCC,EAHoBhB,EAAUc,GAAKG,MAAMF,GAC7BJ,EAAUG,GAAKC,IAM/BX,EAAWc,UAAYC,OAAOT,GAGhC,SAASM,EAAWI,EAAMC,GACxBD,EAAKF,UAAY,GACjBE,EAAKE,UAAY,aAEbD,EAAM,IACRD,EAAKF,UAAYC,OAAOE,GACxBD,EAAKG,UAAUC,IAAmBL,eAAAA,OAAAA,OAAOE,MAI7C,SAASI,IACF,IAAA,IAAIX,EAAM,EAAGA,EAAMX,EAAMW,IACvB,IAAA,IAAIC,EAAM,EAAGA,EAAMN,EAASM,IAC3BJ,GAAwB,IAAxBA,EAAUG,GAAKC,GACV,OAAA,EAKN,OAAA,EAGT,SAASW,IAGF,IAFDC,IAAAA,GAAQ,EAEHb,EAAM,EAAGA,EAAMX,EAAMW,IACvB,IAAA,IAAIC,EAAM,EAAGA,EAAMN,EAASM,IAC3BD,EAAM,EACJH,EAAUG,GAAKC,KAASJ,EAAUG,EAAM,GAAGC,IAC1CJ,EAAUG,GAAKC,KAASJ,EAAUG,GAAKC,EAAM,KAChDY,GAAQ,GAGNhB,EAAUG,GAAKC,KAASJ,EAAUG,GAAKC,EAAM,KAC/CY,GAAQ,GAMZ,SAACA,IAAUF,KAOjB,SAASG,IACH,GAACH,IAQE,IAJDI,IAAAA,EAAQC,KAAKC,SAAW,GAAM,EAAI,EAEpCJ,GAAQ,GAEJA,GAAO,CACPb,IAAAA,EAAMgB,KAAKE,MAAMF,KAAKC,SAAW5B,GACjCY,EAAMe,KAAKE,MAAMF,KAAKC,SAAWtB,GAEX,IAAxBE,EAAUG,GAAKC,KACjBJ,EAAUG,GAAKC,GAAOc,EACtBF,GAAQ,EAERd,MAKN,SAASoB,EAAUnB,GACVA,OAAAA,EAAIoB,OAAO,SAAAC,GAAMA,OAAO,IAAPA,IAG1B,SAASC,EAAMtB,GAGR,IAFDuB,IAAAA,EAASJ,EAAUnB,GAEdwB,EAAI,EAAGA,EAAIxB,EAAIyB,OAAS,EAAGD,IAC9BD,EAAOC,KAAOD,EAAOC,EAAI,IAAME,SAASH,EAAOC,MACjDD,EAAOC,IAAM,EACbD,EAAOC,EAAI,GAAK,EAChB5B,GAAS2B,EAAOC,GAChBG,EAAMJ,EAAOC,KAMVD,IAFPA,EAASJ,EAAUI,GAEZA,EAAOE,OAAS9B,GACrB4B,EAAOK,KAAK,GAGPL,OAAAA,EAGT,SAASM,IACF,IAAA,IAAIL,EAAI,EAAGA,EAAInC,EAAMmC,IAAK,CACzBxB,IAAAA,EAAMH,EAAU2B,GAEpBxB,EAAMsB,EAAMtB,GACZH,EAAU2B,GAAKxB,EAGjBD,IAGF,SAAS+B,IACF,IAAA,IAAIN,EAAI,EAAGA,EAAInC,EAAMmC,IAAK,CACzBxB,IAAAA,EAAMH,EAAU2B,GAEpBxB,EAAI+B,WACJ/B,EAAMsB,EAAMtB,IACR+B,UACJlC,EAAU2B,GAAKxB,EAGjBD,IAGF,SAASiC,IACF,IAAA,IAAIC,EAAS,EAAGA,EAAStC,EAASsC,IAAU,CAC3CjC,IAAAA,EAAM,CAACH,EAAU,GAAGoC,GAASpC,EAAU,GAAGoC,GAASpC,EAAU,GAAGoC,GAClEpC,EAAU,GAAGoC,IAEfjC,EAAMsB,EAAMtB,GAEP,IAAA,IAAIwB,EAAI,EAAGA,EAAI7B,EAAS6B,IAC3B3B,EAAU2B,GAAGS,GAAUjC,EAAIwB,GAI/BzB,IAGF,SAASmC,IACF,IAAA,IAAID,EAAS,EAAGA,EAAStC,EAASsC,IAAU,CAC3CjC,IAAAA,EAAM,CAACH,EAAU,GAAGoC,GAASpC,EAAU,GAAGoC,GAASpC,EAAU,GAAGoC,GAClEpC,EAAU,GAAGoC,IAEfjC,EAAI+B,WACJ/B,EAAMsB,EAAMtB,IACR+B,UAEC,IAAA,IAAIP,EAAI,EAAGA,EAAI7B,EAAS6B,IAC3B3B,EAAU2B,GAAGS,GAAUjC,EAAIwB,GAI/BzB,IAGF,SAAS4B,EAAMZ,GACC,OAAVA,IACFtB,EAAWgB,UAAU0B,OAAO,UAC5B5C,EAAUkB,UAAU2B,QAAQ,UAAW,SACvC7C,EAAUa,UAAY,SAxN1Bb,EAAU8C,iBAAiB,QAAS,WAClCxC,EAAYC,IAEZF,EAAQ,EAERG,IACAe,IACAA,IAEAtB,EAAaiB,UAAUC,IAAI,UAC3BjB,EAAWgB,UAAUC,IAAI,UACzBhB,EAAYe,UAAUC,IAAI,UAE1BnB,EAAUkB,UAAU2B,QAAQ,QAAS,WACrC7C,EAAUa,UAAY,YAGxBjB,SAASkD,iBAAiB,QAAS,SAACC,GAC9B,GAAC/C,EAAUkB,UAAU8B,SAAS,WAA9B,CAIID,OAAAA,EAAKE,MACN,IAAA,YACHX,IACAf,IACA,MAEG,IAAA,aACHgB,IACAhB,IACA,MAEG,IAAA,UACHkB,IACAlB,IACA,MAEG,IAAA,YACHoB,IACApB,IAICF,KACHlB,EAAYe,UAAU0B,OAAO","file":"main.0b88c882.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst fieldRows = document.querySelector('tbody').rows;\nconst scoreBoard = document.querySelector('.game-score');\nconst startGame = document.querySelector('.start');\n\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\n\nlet gameField = resetField();\n\nfunction resetField() {\n  return [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n}\n\nstartGame.addEventListener('click', () => {\n  gameField = resetField();\n\n  score = 0;\n\n  updateGame();\n  setNewCell();\n  setNewCell();\n\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  startGame.classList.replace('start', 'restart');\n  startGame.innerText = 'Restart';\n});\n\ndocument.addEventListener('keyup', (type) => {\n  if (!startGame.classList.contains('restart')) {\n    return;\n  }\n\n  switch (type.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      setNewCell();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      setNewCell();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      setNewCell();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      setNewCell();\n      break;\n  }\n\n  if (!isPossible()) {\n    loseMessage.classList.remove('hidden');\n  }\n});\n\nfunction updateGame() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      const currentCell = fieldRows[row].cells[col];\n      const num = gameField[row][col];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreBoard.innerText = String(score);\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.className = 'field-cell';\n\n  if (num > 0) {\n    cell.innerText = String(num);\n    cell.classList.add(`field-cell--${String(num)}`);\n  }\n}\n\nfunction isEmpty() {\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (gameField[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isPossible() {\n  let check = false;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < columns; col++) {\n      if (row < 3) {\n        if (gameField[row][col] === gameField[row + 1][col]\n          || gameField[row][col] === gameField[row][col + 1]) {\n          check = true;\n        }\n      } else {\n        if (gameField[row][col] === gameField[row][col + 1]) {\n          check = true;\n        }\n      }\n    }\n  }\n\n  if (!check && !isEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction setNewCell() {\n  if (!isEmpty()) {\n    return;\n  }\n\n  const value = Math.random() > 0.1 ? 2 : 4;\n\n  let check = false;\n\n  while (!check) {\n    const row = Math.floor(Math.random() * rows);\n    const col = Math.floor(Math.random() * columns);\n\n    if (gameField[row][col] === 0) {\n      gameField[row][col] = value;\n      check = true;\n\n      updateGame();\n    }\n  }\n}\n\nfunction filterRow(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction slide(row) {\n  let newRow = filterRow(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      isWin(newRow[i]);\n    }\n  }\n\n  newRow = filterRow(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < rows; i++) {\n    let row = gameField[i];\n\n    row = slide(row);\n    gameField[i] = row;\n  }\n\n  updateGame();\n}\n\nfunction slideRight() {\n  for (let i = 0; i < rows; i++) {\n    let row = gameField[i];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    gameField[i] = row;\n  }\n\n  updateGame();\n}\n\nfunction slideUp() {\n  for (let column = 0; column < columns; column++) {\n    let row = [gameField[0][column], gameField[1][column], gameField[2][column],\n      gameField[3][column]];\n\n    row = slide(row);\n\n    for (let i = 0; i < columns; i++) {\n      gameField[i][column] = row[i];\n    }\n  }\n\n  updateGame();\n}\n\nfunction slideDown() {\n  for (let column = 0; column < columns; column++) {\n    let row = [gameField[0][column], gameField[1][column], gameField[2][column],\n      gameField[3][column]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let i = 0; i < columns; i++) {\n      gameField[i][column] = row[i];\n    }\n  }\n\n  updateGame();\n}\n\nfunction isWin(value) {\n  if (value === 2048) {\n    winMessage.classList.remove('hidden');\n    startGame.classList.replace('restart', 'start');\n    startGame.innerText = 'Start';\n  }\n}\n"]}